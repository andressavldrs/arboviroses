%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.3
%%CreationDate: Tue Jan 16 17:53:07 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGUUGUUGAUCUGUGUGAAUCAGACUGCGACAGUUCGAGUUUGAAGCGAAAGCUAGCAACAGUAUCAACAGGUUUUAUUUUGGAUUUGGAAACGAGAGUUUCUGGUC\
) def
/coor [
[275.04180908 260.62191772]
[274.27511597 240.96467590]
[279.89935303 222.09358215]
[267.36703491 213.85093689]
[254.83470154 205.60830688]
[242.30239868 197.36567688]
[229.77008057 189.12303162]
[217.23776245 180.88040161]
[204.70544434 172.63777161]
[192.17312622 164.39514160]
[179.52224731 156.33564758]
[166.75550842 148.46099854]
[153.98875427 140.58634949]
[141.22200012 132.71170044]
[128.34207153 125.02355957]
[115.35169220 117.52355957]
[103.21993256 125.04084778]
[87.83682251 124.32563782]
[74.64201355 114.37097931]
[68.99253845 97.64037323]
[54.62269211 93.33832550]
[40.25284958 89.03627777]
[25.88300705 84.73422241]
[11.51316547 80.43217468]
[-2.85667729 76.13012695]
[-17.22652054 71.82807922]
[-26.50501442 72.35761261]
[-31.94839668 67.18628693]
[-46.18703842 62.46812057]
[-60.42567825 57.74994659]
[-76.36786652 61.59424591]
[-87.47059631 49.52521896]
[-82.31233215 33.95844650]
[-66.19944763 30.90769386]
[-55.70750427 43.51130676]
[-41.46886444 48.22948074]
[-27.23022652 52.94765091]
[-12.92447186 57.45823669]
[1.44537115 61.76028824]
[15.81521416 66.06233215]
[30.18505669 70.36437988]
[44.55489731 74.66643524]
[58.92474365 78.96848297]
[73.29458618 83.27053070]
[84.05432892 72.81931305]
[80.17204285 58.33042145]
[76.28975677 43.84153366]
[64.31751251 32.63450623]
[68.29998779 16.72627068]
[84.14035034 12.48185921]
[95.54338837 24.26755714]
[90.77864075 39.95925140]
[94.66092682 54.44813538]
[98.54321289 68.93702698]
[120.60899353 82.25319672]
[122.85169220 104.53317261]
[135.84207153 112.03317261]
[144.99258423 113.65768433]
[149.09664917 119.94494629]
[161.86340332 127.81959534]
[174.63014221 135.69424438]
[187.39689636 143.56889343]
[196.49629211 145.45884705]
[200.41575623 151.86282349]
[212.94807434 160.10545349]
[225.48039246 168.34808350]
[238.01271057 176.59072876]
[250.54502869 184.83335876]
[263.07733154 193.07598877]
[275.60964966 201.31861877]
[288.14196777 209.56126404]
[296.15408325 201.80833435]
[305.45410156 195.66850281]
[315.72204590 191.35078430]
[326.60510254 189.00149536]
[337.72964478 188.69937134]
[348.71408081 190.45286560]
[359.18203735 194.20001221]
[368.77514648 199.81053162]
[377.16537476 207.09037781]
[384.06622314 215.78846741]
[389.24252319 225.60536194]
[392.51840210 236.20349121]
[393.78335571 247.21887207]
[392.99581909 258.27352905]
[390.18469238 268.98846436]
[385.44824219 278.99670410]
[378.95056152 287.95584106]
[388.92251587 299.16122437]
[398.89443970 310.36660767]
[408.86639404 321.57199097]
[418.83831787 332.77734375]
[428.81027222 343.98272705]
[444.53875732 348.62457275]
[448.11947632 364.62802124]
[435.86892700 375.53009033]
[420.38937378 370.11569214]
[417.60488892 353.95468140]
[407.63296509 342.74929810]
[397.66101074 331.54391479]
[387.68908691 320.33853149]
[377.71713257 309.13317871]
[367.74520874 297.92779541]
[350.05087280 306.25802612]
[330.59582520 308.43371582]
[311.46099854 304.20965576]
[294.69717407 294.02587891]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 62]
[12 61]
[13 60]
[14 59]
[15 57]
[16 56]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[28 37]
[29 36]
[30 35]
[45 54]
[46 53]
[47 52]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
