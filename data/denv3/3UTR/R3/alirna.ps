%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Nov 27 04:32:39 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
UGCAAAGGACUAGAGGUUAGAGGAGACCCCCCGCAAAUAAAAACAGCAUAUUGACGCUGGGAGAGACCAGAGAUCCUGCUGUCUCCUCAGCAUCAUUCCAGGCACAGAACGCCAGAAAAUGGA_AUG\
) def
/coor [
[76.20655823 99.34563446]
[64.61140442 108.86153412]
[53.01624680 118.37743378]
[52.56117249 129.37774658]
[46.20795441 138.09756470]
[36.29090881 141.74897766]
[26.22970200 139.33389282]
[14.18158913 148.26937866]
[12.52772236 152.54644775]
[9.82822800 155.70066833]
[6.58749866 157.53669739]
[3.32038641 158.05168152]
[0.48559642 157.42076111]
[-5.34307051 164.59371948]
[-12.79206467 165.15921021]
[-25.84337044 172.55267334]
[-38.89467621 179.94615173]
[-51.94598007 187.33963013]
[-55.91910172 202.63635254]
[-69.58708191 210.57121277]
[-84.84094238 206.43658447]
[-92.63085175 192.68547058]
[-88.33518219 177.47618103]
[-74.50248718 169.83209229]
[-59.33945084 174.28831482]
[-46.28814697 166.89485168]
[-33.23684311 159.50137329]
[-20.18553734 152.10789490]
[-7.22594452 144.55482483]
[5.24609947 136.22126770]
[17.29421234 127.28578186]
[23.54046631 109.05186462]
[43.50034714 106.78227997]
[55.09550476 97.26638031]
[66.69065857 87.75048065]
[53.87156677 95.53962708]
[39.40237045 99.49466705]
[24.40351295 99.30933380]
[10.03645706 94.99799347]
[-2.58626699 86.89448547]
[-12.48720169 75.62631989]
[-18.89965439 62.06606674]
[-21.32706642 47.26378250]
[-19.58147049 32.36569977]
[-13.79803753 18.52547073]
[-4.42461491 6.81483698]
[7.81295156 -1.85937524]
[21.96702957 -6.82546568]
[36.94158173 -7.69887829]
[51.57702637 -4.41197920]
[64.74005127 2.78070617]
[75.41136169 13.32220268]
[82.76461029 26.39621353]
[86.23038483 40.99033737]
[85.54030609 55.97445297]
[80.75000000 70.18389130]
[87.49417114 56.78553009]
[94.23834229 43.38716507]
[100.98251343 29.98880005]
[107.72667694 16.59043503]
[114.47084808 3.19207048]
[115.55770111 -5.98636341]
[121.54847717 -10.44930458]
[128.61943054 -23.67812347]
[135.69038391 -36.90694427]
[142.76133728 -50.13576126]
[149.83227539 -63.36458206]
[156.57644653 -76.76294708]
[162.98977661 -90.32278442]
[169.40310669 -103.88262177]
[165.37393188 -119.41147614]
[175.11759949 -132.15669250]
[191.15959167 -132.34124756]
[201.19386292 -119.82353973]
[197.52299500 -104.20610809]
[182.96293640 -97.46929932]
[176.54962158 -83.90946198]
[170.13629150 -70.34961700]
[170.91487122 -65.53989410]
[168.60501099 -60.20160294]
[163.06109619 -56.29362869]
[155.99014282 -43.06481171]
[148.91920471 -29.83599091]
[141.84825134 -16.60717201]
[134.77729797 -3.37835383]
[127.86921692 9.93624020]
[121.12504578 23.33460426]
[114.38087463 36.73297119]
[107.63670349 50.13133240]
[100.89253235 63.52969742]
[94.14836884 76.92806244]
[109.85202789 80.10949707]
[118.94445801 91.93170166]
[118.10534668 105.71298218]
[129.46348572 115.51057434]
[140.82160950 125.30817413]
[152.29911804 134.96563721]
[163.89428711 144.48153687]
[175.48944092 153.99743652]
[187.08459473 163.51333618]
[199.34837341 172.15046692]
[212.21429443 179.86199951]
[225.08023071 187.57354736]
[239.80020142 182.29565430]
[254.45094299 187.76283264]
[262.11477661 201.39366150]
[259.17312622 216.75207520]
[247.01490784 226.58628845]
[231.38088989 226.25289917]
[219.65295410 215.90931702]
[217.36868286 200.43948364]
[204.50276184 192.72793579]
[191.63682556 185.01638794]
[193.52906799 199.89656067]
[184.52534485 211.89378357]
[169.70910645 214.23452759]
[157.44546509 205.59722900]
[154.65834045 190.85844421]
[162.92134094 178.33953857]
[177.56869507 175.10850525]
[165.97354126 165.59260559]
[154.37838745 156.07670593]
[142.78321838 146.56080627]
[135.54057312 144.73014832]
[131.02401733 136.66630554]
[119.66589355 126.86871338]
[108.30775452 117.07112122]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[7 31]
[8 30]
[13 29]
[15 28]
[16 27]
[17 26]
[18 25]
[56 91]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 78]
[69 77]
[70 76]
[94 127]
[95 126]
[96 125]
[97 123]
[98 122]
[99 121]
[100 120]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 cmark
17 26 1 gmark
87 cmark
94 127 1 gmark
95 126 1 gmark
123 cmark
98 122 1 gmark
101 113 1 gmark
102 112 2 gmark
103 111 2 gmark

% End Annotations
% show it
showpage
end
%%EOF
