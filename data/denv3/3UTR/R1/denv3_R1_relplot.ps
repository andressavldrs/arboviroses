%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Nov 27 04:32:32 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
ACGUAGGAAGUGAAAAAGAGGUUAACUGUCAGGCCACAUUAAGCCACAGUACGGAAGAAGCUGUGCUGCCUGUGAGCCCCGUCCAAGGACGUUAAAAGAAGAAGUCAGGCCCCAAAGCCACGGUUUGAGCAAACCGUGC\
) def
/coor [
[74.22863770 343.91403198]
[64.78422546 355.56750488]
[53.09013748 364.96154785]
[39.67473221 371.67175293]
[25.14414597 375.39495850]
[10.15490246 375.96289062]
[-4.61575747 373.34991455]
[-18.50046539 367.67410278]
[-30.87188148 359.19189453]
[-41.17104340 348.28649902]
[-48.93261337 335.45068359]
[-53.80590439 321.26440430]
[-55.57073593 306.36856079]
[-54.14736938 291.43624878]
[-49.60011292 277.14212036]
[-42.13442230 264.13198853]
[-32.08761215 252.99369812]
[-19.91361618 244.23048401]
[-6.16248083 238.23829651]
[8.54449081 235.28788757]
[23.54280853 235.51252747]
[38.15481949 238.90209961]
[51.72032166 245.30343628]
[63.62639999 254.42732239]
[73.33511353 265.86151123]
[80.40836334 279.09078979]
[81.41739655 264.12475586]
[68.97246552 255.94006348]
[62.25052643 242.53590393]
[63.14637375 227.46726990]
[71.51937103 214.78698730]
[85.20441437 207.95567322]
[86.21344757 192.98965454]
[87.22248840 178.02362061]
[88.23152161 163.05760193]
[70.18553162 156.79661560]
[54.78320312 145.49945068]
[43.39027405 130.16781616]
[37.01695633 112.16120148]
[36.22837448 93.07623291]
[41.09445953 74.60520172]
[51.18372345 58.38594437]
[65.60155487 45.85662460]
[59.09329605 32.34209061]
[52.43381882 18.90142822]
[45.62396240 5.53633070]
[38.81410599 -7.82876730]
[32.00424576 -21.19386482]
[24.60162354 -34.23998260]
[16.62114334 -46.94084549]
[8.64066219 -59.64170837]
[0.66018063 -72.34256744]
[-7.32030058 -85.04343414]
[-15.30078125 -97.74430084]
[-30.76265717 -101.01628876]
[-39.31205750 -114.30851746]
[-35.87677383 -129.73493958]
[-22.49489975 -138.14332581]
[-7.10566425 -134.54513550]
[1.16077316 -121.07511139]
[-2.59991860 -105.72477722]
[5.38056231 -93.02391815]
[13.36104393 -80.32305145]
[21.34152412 -67.62219238]
[29.32200623 -54.92132568]
[37.30248642 -42.22046280]
[40.09080124 -41.49163055]
[42.74493027 -39.56825638]
[44.79072189 -36.50075150]
[45.78321075 -32.51652145]
[45.36934662 -28.00372314]
[52.17920303 -14.63862514]
[58.98905945 -1.27352691]
[65.79891968 12.09157085]
[71.68682861 16.66098976]
[72.60782623 25.83383369]
[79.11608124 39.34836578]
[98.18764496 35.87922287]
[117.42471313 38.26558685]
[135.07055664 46.28953171]
[144.68368530 34.77486038]
[154.29682922 23.26018906]
[163.90995789 11.74551773]
[166.18273926 -4.49537182]
[181.48359680 -10.39587688]
[194.07231140 0.11393665]
[190.99870300 16.22247314]
[175.42463684 21.35865211]
[165.81149292 32.87332153]
[156.19836426 44.38799286]
[146.58523560 55.90266418]
[152.06097412 62.52448654]
[156.60255432 69.81874084]
[160.12852478 77.65454102]
[162.57557678 85.89129639]
[163.89982605 94.38120270]
[164.07749939 102.97193146]
[163.10542297 111.50933838]
[161.00102234 119.84022522]
[157.80206299 127.81510925]
[153.56594849 135.29090881]
[148.36868286 142.13346863]
[142.30352783 148.22001648]
[135.47930908 153.44134521]
[128.01847839 157.70375061]
[120.05489349 160.93077087]
[111.73146820 163.06449890]
[103.19754028 164.06663513]
[102.18850708 179.03266907]
[101.17947388 193.99868774]
[100.17044067 208.96470642]
[112.81464386 217.57118225]
[119.40974426 231.26065063]
[118.27477264 246.31315613]
[109.81438446 258.69369507]
[96.38342285 265.13378906]
[95.37438965 280.09982300]
[99.00786591 286.76721191]
[98.46120453 293.62405396]
[105.86382294 306.67016602]
[113.26644897 319.71627808]
[120.66907501 332.76239014]
[128.07170105 345.80850220]
[135.47431946 358.85461426]
[142.87693787 371.90075684]
[150.27957153 384.94686890]
[164.68624878 392.78134155]
[164.83418274 409.17984009]
[150.57116699 417.27294922]
[136.56977844 408.73519897]
[137.23344421 392.34948730]
[129.83082581 379.30337524]
[122.42819977 366.25726318]
[115.02558136 353.21112061]
[107.62295532 340.16500854]
[100.22032928 327.11889648]
[92.81771088 314.07278442]
[85.41508484 301.02667236]
[84.78249359 316.01330566]
] def
/pairs [
[26 117]
[27 116]
[32 111]
[33 110]
[34 109]
[35 108]
[43 77]
[44 76]
[45 74]
[46 73]
[47 72]
[48 71]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[80 91]
[81 90]
[82 89]
[83 88]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 3.0 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  0.36751
  0.61636
  0.03535
  -0.00000
  0.05870
  1.09472
  1.27877
  0.41643
  0.65057
  1.28169
  1.26480
  0.01552
  0.00457
  0.00387
  0.00705
  0.02425
  0.68469
  0.82638
  1.15191
  2.16226
  1.89165
  1.51906
  -0.00000
  0.00674
  1.21803
  2.77084
  2.96181
  1.36233
  2.31150
  2.13187
  0.12174
  1.62685
  1.59246
  1.57570
  1.46854
  0.93268
  0.95498
  -0.00000
  0.05426
  0.09313
  0.09057
  0.10211
  1.85657
  1.79775
  1.65523
  1.59155
  1.62447
  1.61056
  1.75408
  1.25136
  0.83087
  0.85255
  0.85722
  0.84766
  0.01599
  0.00098
  0.00008
  0.00544
  0.01843
  0.95057
  1.02390
  0.98802
  0.94821
  0.98646
  1.36106
  1.46300
  -0.00000
  1.39251
  1.30067
  1.67914
  1.78833
  1.68397
  1.73541
  1.54173
  0.17226
  1.73917
  1.81641
  1.05580
  0.34111
  0.54400
  0.27333
  0.32754
  0.33222
  0.19312
  0.00420
  0.00878
  0.13956
  0.33980
  0.30914
  0.31779
  0.49129
  0.47530
  0.50931
  0.04452
  0.00769
  0.01917
  0.06060
  0.97275
  0.81090
  0.18318
  0.77737
  0.40551
  0.38864
  1.40688
  1.38397
  2.00637
  1.09884
  1.90828
  1.79810
  1.81135
  1.70097
  0.87023
  -0.00000
  0.10063
  0.02750
  0.62347
  1.98916
  1.39472
  1.09618
  0.11916
  0.03719
  0.03151
  0.03128
  0.07542
  0.33399
  0.88362
  0.02407
  0.02036
  0.01235
  0.01940
  0.84323
  0.32218
  0.07052
  0.03218
  0.03246
  0.03664
  0.13045
  1.06825
  0.87937
] def

/invert false def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
% Start Annotations
26 cmark
27 116 1 gmark
46 73 1 gmark
51 cmark
121 cmark
124 133 1 gmark
133 cmark
126 131 1 gmark

% End Annotations
% show it
showpage
end
%%EOF
