%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.3
%%CreationDate: Tue Jan 16 17:53:06 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGUUGUUAGUCUACGUGGACCGACAAGAACAGUUUCGACUCGGAAGCUUGCUUAACGUAGUGCUGACAGUUUUUUAUUAGAGAGCAGAUCUCUG\
) def
/coor [
[241.95166016 291.98962402]
[234.58911133 273.04028320]
[239.81123352 253.25584412]
[229.47093201 242.38946533]
[219.13063049 231.52308655]
[208.79032898 220.65670776]
[198.45002747 209.79032898]
[188.10974121 198.92395020]
[177.76943970 188.05757141]
[167.42913818 177.19119263]
[156.91058350 166.49726868]
[146.21665955 155.97871399]
[135.52272034 145.46015930]
[124.82879639 134.94160461]
[114.13487244 124.42305756]
[103.44094849 113.90450287]
[89.95552063 110.21194458]
[86.04050446 96.78942108]
[75.34657288 86.27086639]
[60.08235931 82.10982513]
[56.43440628 67.66884613]
[45.74047852 57.15029907]
[45.22286606 72.14136505]
[36.19363785 84.11938477]
[21.92442703 88.74427795]
[7.58550596 84.34027100]
[-1.62759531 72.50308990]
[-2.37662244 57.52180481]
[5.60982513 44.82469177]
[19.43795776 39.01239777]
[34.09699249 42.19074631]
[26.52551079 29.24189949]
[18.95402718 16.29305267]
[11.38254356 3.34420443]
[3.81106067 -9.60464287]
[-3.76042223 -22.55348969]
[-19.11011696 -26.31678963]
[-27.23137474 -39.87483978]
[-23.30599785 -55.18388748]
[-9.66284370 -63.16135025]
[5.60384798 -59.07433701]
[13.43661880 -45.34759903]
[9.18842506 -30.12497330]
[16.75990868 -17.17612648]
[24.33139038 -4.22727871]
[31.90287399 8.72156906]
[39.47435760 21.67041588]
[47.04584122 34.61926270]
[56.25902939 46.45637131]
[66.95295715 56.97492218]
[81.45227051 60.38361359]
[85.86512756 75.57694244]
[96.55905151 86.09549713]
[110.04447937 89.78805542]
[113.95949554 103.21057892]
[124.65342712 113.72913361]
[135.34735107 124.24768066]
[146.04127502 134.76623535]
[156.73519897 145.28479004]
[167.42913818 155.80334473]
[175.91842651 159.69393921]
[178.29551697 166.85089111]
[188.63580322 177.71726990]
[198.97610474 188.58364868]
[209.31640625 199.45002747]
[219.65670776 210.31640625]
[229.99700928 221.18278503]
[240.33731079 232.04916382]
[250.67761230 242.91554260]
[260.42456055 239.18379211]
[270.81869507 238.66882324]
[280.82885742 241.40301514]
[289.46780396 247.09736633]
[295.88952637 255.17190552]
[299.47219849 264.81466675]
[299.87814331 275.06341553]
[297.08578491 284.90158081]
[291.38986206 293.35916138]
[299.80059814 305.77929688]
[308.21133423 318.19943237]
[316.62203979 330.61956787]
[325.03277588 343.03967285]
[333.44351196 355.45980835]
[348.86224365 359.89178467]
[354.87725830 374.76455688]
[346.87438965 388.66897583]
[330.99270630 390.93881226]
[319.41531372 379.83279419]
[321.02337646 363.87054443]
[312.61264038 351.45040894]
[304.20190430 339.03027344]
[295.79119873 326.61013794]
[287.38046265 314.19000244]
[278.96972656 301.76989746]
] def
/pairs [
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[18 53]
[19 52]
[21 50]
[22 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
