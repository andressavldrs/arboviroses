%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Nov 27 04:31:59 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
GUAAGGACUAGAGGUUAGAGGAGACCCCCCGCAUAACAAUAAACAGCAUAUUGACGCUGGGAGAGACCAGAGAUCCUGCUGUCUCUACAGCAUCAUUCCAGGCACAGAACGCCAGAAAAUGGAAUG\
) def
/coor [
[71.81166840 161.07653809]
[84.89025879 153.73144531]
[99.57516479 150.67308044]
[114.49864197 152.18630981]
[128.27137756 158.13056946]
[120.19016266 145.49357605]
[112.10894775 132.85656738]
[106.07280731 136.17718506]
[99.21502686 138.34178162]
[91.76575470 139.15994263]
[83.99723816 138.48852539]
[76.21391296 136.24060059]
[68.74058533 132.39237976]
[56.41205978 140.93682861]
[44.08353806 149.48127747]
[31.75501823 158.02572632]
[29.18276787 173.61927795]
[16.28910637 182.75869751]
[0.72361517 180.02172852]
[-8.27897739 167.03216553]
[-5.37759256 151.49647522]
[7.70642996 142.63172913]
[23.21057129 145.69720459]
[35.53909302 137.15275574]
[47.86761475 128.60830688]
[60.19613647 120.06385803]
[59.27086258 112.62115479]
[44.38542175 114.47145081]
[42.53536987 99.58597565]
[57.42031860 97.73574066]
[56.49504852 90.29303741]
[42.44966125 85.02737427]
[31.79598999 95.90943146]
[17.63485336 101.51140594]
[2.41975951 100.86273193]
[-11.21318722 94.07578278]
[-20.90199661 82.32644653]
[-24.96802330 67.65036774]
[-22.70680237 52.59026337]
[-14.51010513 39.75538635]
[-1.79805970 31.36945915]
[13.22689629 28.88539314]
[27.96159744 32.73357010]
[39.85316849 42.24726486]
[46.84132385 55.77817535]
[47.71532059 70.98199463]
[61.76070786 76.24765015]
[70.48409271 68.70806885]
[80.42842102 63.95445633]
[90.77658081 62.08945847]
[100.74447632 62.99085236]
[109.63954926 66.33608246]
[116.76157379 53.13469315]
[123.88360596 39.93330002]
[123.62641144 24.11418533]
[136.47888184 16.58669281]
[143.60092163 3.38530302]
[150.72294617 -9.81608677]
[157.84497070 -23.01747704]
[154.90121460 -35.64736176]
[161.19033813 -46.52645111]
[172.83438110 -50.04445648]
[180.28076172 -63.06564713]
[187.72714233 -76.08683777]
[195.17352295 -89.10803223]
[202.61988831 -102.12922668]
[210.06626892 -115.15041351]
[217.18830872 -128.35180664]
[223.98162842 -141.72531128]
[230.77494812 -155.09883118]
[227.18547058 -170.73516846]
[237.28482056 -183.20042419]
[253.32563782 -182.93232727]
[263.00277710 -170.13652039]
[258.89276123 -154.62886047]
[244.14845276 -148.30551147]
[237.35513306 -134.93199158]
[230.56181335 -121.55848694]
[231.20518494 -116.72685242]
[228.74374390 -111.45375824]
[223.08746338 -107.70403290]
[215.64108276 -94.68284607]
[208.19470215 -81.66165161]
[200.74832153 -68.64046478]
[193.30195618 -55.61927032]
[185.85557556 -42.59807587]
[186.92124939 -25.12758446]
[171.04637146 -15.89544773]
[163.92433167 -2.69405746]
[156.80230713 10.50733280]
[149.68028259 23.70872307]
[150.44688416 38.58358765]
[137.08499146 47.05533218]
[129.96296692 60.25672150]
[122.84093475 73.45811462]
[134.99275208 98.70098114]
[124.74595642 124.77534485]
[132.82717896 137.41235352]
[140.90838623 150.04936218]
[149.03988647 154.15728760]
[152.31948853 161.60247803]
[164.85557556 169.83937073]
[177.39166260 178.07626343]
[192.31727600 173.41148376]
[206.72943115 179.47973633]
[213.82316589 193.41577148]
[210.24902344 208.63941956]
[197.69459534 217.96253967]
[182.08772278 216.98304749]
[170.79748535 206.16340637]
[169.15476990 190.61235046]
[156.61868286 182.37545776]
[144.08258057 174.13856506]
[149.85588074 187.98303223]
[151.18464661 202.92405701]
[147.94511414 217.57006836]
[140.43904114 230.55693054]
[129.36549377 240.67506409]
[115.75588989 246.98208618]
[100.87779236 248.89056396]
[86.11694336 246.22273254]
[72.84815216 239.22706604]
[62.30726242 228.55516052]
[55.47604370 215.20097351]
[52.99074936 200.40829468]
[55.08285904 185.55490112]
] def
/pairs [
[5 99]
[6 98]
[7 97]
[13 26]
[14 25]
[15 24]
[16 23]
[31 47]
[32 46]
[52 95]
[53 94]
[54 93]
[56 91]
[57 90]
[58 89]
[59 88]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 78]
[69 77]
[70 76]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 2.5 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  1.30999
  1.30747
  0.09305
  0.26479
  2.33674
  2.48860
  1.45417
  0.97499
  0.85126
  0.32744
  1.99268
  0.27263
  1.23272
  1.33839
  1.27970
  1.37108
  0.19353
  0.77072
  0.04840
  1.17261
  1.14398
  0.08544
  1.05471
  0.75067
  0.82514
  0.95271
  1.50525
  1.97911
  1.77212
  1.51544
  1.45282
  1.66894
  0.56370
  0.64986
  0.18688
  0.42654
  0.68804
  0.09319
  0.05594
  0.12435
  0.05280
  0.05911
  0.20548
  0.84579
  0.81050
  1.69547
  1.75254
  0.48300
  0.36430
  0.29050
  0.30948
  1.26224
  1.09356
  0.93673
  0.23409
  0.74291
  0.73251
  0.74029
  0.84197
  1.35020
  1.11858
  1.43813
  1.32542
  1.29766
  1.14528
  1.46049
  1.47543
  1.58657
  1.34756
  1.37826
  0.65346
  0.91192
  0.07384
  0.47165
  0.50386
  1.41915
  1.62263
  1.30839
  1.30635
  1.95896
  1.82975
  1.49296
  1.43434
  1.44201
  1.41520
  1.65384
  0.48325
  0.91126
  0.77845
  0.77979
  0.85259
  0.21691
  1.19688
  1.09402
  1.44636
  1.47324
  2.23127
  1.64962
  1.46780
  0.05081
  0.22043
  0.22940
  0.23624
  0.00613
  0.03775
  0.02472
  0.01919
  0.01000
  0.01237
  0.04086
  0.20657
  0.20055
  0.24001
  0.07629
  1.27552
  0.78865
  0.73074
  0.65671
  0.92035
  1.18759
  1.21412
  0.51314
  0.06869
  0.10813
  0.34594
  0.27869
] def

/invert false def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
% Start Annotations
31 47 1 gmark
32 46 1 gmark
63 85 1 gmark
66 82 1 gmark
101 113 1 gmark
102 112 2 gmark

% End Annotations
% show it
showpage
end
%%EOF
