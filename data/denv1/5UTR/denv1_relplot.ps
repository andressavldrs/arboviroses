%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Nov 27 04:31:41 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGUUGUUAGUCUACGUGGACCGACAAGAACAGUUUCGAAUCGGAAGCUUGCUUAACGUAGUUCUAACAGUUUUUUAUUAGAGAGCAGAUCUCUG\
) def
/coor [
[242.50189209 292.15222168]
[235.13934326 273.20291138]
[240.36146545 253.41844177]
[230.02116394 242.55206299]
[219.68086243 231.68568420]
[209.34056091 220.81930542]
[199.00025940 209.95292664]
[188.65995789 199.08654785]
[178.31965637 188.22016907]
[161.30554199 184.28379822]
[156.91058350 166.49726868]
[146.21665955 155.97871399]
[135.52272034 145.46015930]
[124.82879639 134.94160461]
[114.13487244 124.42305756]
[103.44094849 113.90450287]
[89.95552063 110.21194458]
[86.04050446 96.78942108]
[75.34657288 86.27086639]
[60.08235931 82.10982513]
[56.43440628 67.66884613]
[45.74047852 57.15029907]
[45.22286606 72.14136505]
[36.19363785 84.11938477]
[21.92442703 88.74427795]
[7.58550596 84.34027100]
[-1.62759531 72.50308990]
[-2.37662244 57.52180481]
[5.60982513 44.82469177]
[19.43795776 39.01239777]
[34.09699249 42.19074631]
[26.52551079 29.24189949]
[18.95402718 16.29305267]
[11.38254356 3.34420443]
[3.81106067 -9.60464287]
[-3.76042223 -22.55348969]
[-19.11011696 -26.31678963]
[-27.23137474 -39.87483978]
[-23.30599785 -55.18388748]
[-9.66284370 -63.16135025]
[5.60384798 -59.07433701]
[13.43661880 -45.34759903]
[9.18842506 -30.12497330]
[16.75990868 -17.17612648]
[24.33139038 -4.22727871]
[31.90287399 8.72156906]
[39.47435760 21.67041588]
[47.04584122 34.61926270]
[56.25902939 46.45637131]
[66.95295715 56.97492218]
[81.45227051 60.38361359]
[85.86512756 75.57694244]
[96.55905151 86.09549713]
[110.04447937 89.78805542]
[113.95949554 103.21057892]
[124.65342712 113.72913361]
[135.34735107 124.24768066]
[146.04127502 134.76623535]
[156.73519897 145.28479004]
[167.42913818 155.80334473]
[180.43756104 156.51115417]
[189.13703918 165.65930176]
[189.18603516 177.87986755]
[199.52633667 188.74624634]
[209.86663818 199.61262512]
[220.20693970 210.47900391]
[230.54724121 221.34538269]
[240.88754272 232.21176147]
[251.22784424 243.07814026]
[260.97479248 239.34638977]
[271.36892700 238.83142090]
[281.37908936 241.56561279]
[290.01803589 247.25996399]
[296.43975830 255.33450317]
[300.02239990 264.97726440]
[300.42834473 275.22601318]
[297.63601685 285.06420898]
[291.94009399 293.52175903]
[300.35083008 305.94189453]
[308.76156616 318.36203003]
[317.17227173 330.78216553]
[325.58300781 343.20230103]
[333.99374390 355.62240601]
[349.41244507 360.05438232]
[355.42749023 374.92715454]
[347.42459106 388.83157349]
[331.54293823 391.10140991]
[319.96554565 379.99539185]
[321.57360840 364.03314209]
[313.16287231 351.61300659]
[304.75213623 339.19287109]
[296.34143066 326.77273560]
[287.93069458 314.35260010]
[279.51995850 301.93249512]
] def
/pairs [
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[18 53]
[19 52]
[21 50]
[22 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 2.0 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  0.62271
  0.81573
  0.90117
  0.26956
  0.01354
  0.02149
  0.02597
  0.02281
  0.04847
  0.01068
  0.04812
  0.02665
  0.02080
  0.01486
  0.04214
  0.34201
  1.09248
  1.38277
  1.05134
  0.82147
  1.60283
  1.95432
  1.26335
  1.07505
  1.08675
  0.88972
  1.63377
  0.86006
  0.69395
  0.50175
  1.17916
  0.78037
  0.79759
  1.00197
  0.86887
  0.84616
  0.12054
  0.00606
  0.00869
  0.67730
  0.81398
  0.81001
  0.84650
  0.92703
  0.92159
  0.88789
  1.05941
  1.82324
  1.97988
  1.85893
  1.55228
  1.97664
  1.59169
  0.06325
  0.27015
  0.03957
  0.01696
  0.02221
  0.02646
  0.04832
  0.00845
  0.00831
  0.04523
  0.02403
  0.02536
  0.02143
  0.01359
  0.27252
  0.97008
  0.85865
  0.61278
  0.12927
  0.10997
  0.10381
  0.07463
  0.03634
  0.04204
  0.99631
  0.30934
  0.12662
  0.13102
  0.12752
  0.27577
  0.11565
  0.07341
  0.01393
  0.01359
  0.00068
  0.22780
  0.12140
  0.12293
  0.12639
  0.31123
  1.01218
] def

/invert false def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
% Start Annotations
3 cmark
7 65 1 gmark
65 cmark
11 cmark
13 cmark
14 cmark
15 56 1 gmark
21 cmark
49 cmark
44 cmark
79 cmark
83 89 1 gmark

% End Annotations
% show it
showpage
end
%%EOF
