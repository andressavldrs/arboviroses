%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Wed Nov 22 19:10:31 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGUAAAU_CCUGUGUGCUAAUUGAGGUGCAUUGGUCUGCAAAUCGAGUUGCUAGGCAAUAAACACAUUUGGAUUAAUUUUGAUCGUUCGUUGAGCGAUUAGCAGAGAACUGACCAGAAA_\
) def
/coor [
[254.41763306 220.46220398]
[253.42945862 213.08161926]
[253.44705200 205.63240051]
[254.47084045 198.25106812]
[256.48278809 191.07292175]
[243.18013000 184.14189148]
[229.87747192 177.21087646]
[222.40142822 176.90695190]
[216.32289124 169.92332458]
[203.20465088 162.64929199]
[185.75595093 163.95108032]
[176.30410767 148.21333313]
[163.00143433 141.28230286]
[149.69877625 134.35127258]
[136.39611816 127.42024994]
[123.09344482 120.48922729]
[110.85356903 130.23382568]
[94.82266998 132.96929932]
[78.87612915 127.43327332]
[67.15931702 114.43748474]
[63.01345062 96.80266571]
[48.22655106 94.28321075]
[33.43965530 91.76376343]
[18.65275574 89.24431610]
[5.84791040 98.11413574]
[-9.11221695 95.34841156]
[-17.48932266 83.08628845]
[-32.27622223 80.56683350]
[-47.06312180 78.04738617]
[-61.85002136 75.52793884]
[-74.59705353 84.87077332]
[-90.20401001 82.38110352]
[-99.41156006 69.53599548]
[-96.75701904 53.95623398]
[-83.81528473 44.88501358]
[-68.26445770 47.70412445]
[-59.33057022 60.74103928]
[-44.54367065 63.26049042]
[-29.75677299 65.77993774]
[-14.96987438 68.29938507]
[-3.00477862 59.50324631]
[12.02713013 61.84768295]
[21.17220497 74.45741272]
[35.95910263 76.97686768]
[50.74600220 79.49631500]
[65.53289795 82.01576233]
[74.90698242 70.30565643]
[69.21173859 56.42890549]
[63.51649094 42.55215454]
[57.82124329 28.67540741]
[52.12599945 14.79865742]
[40.51858139 2.44130445]
[49.17974854 -12.13334751]
[65.58246613 -7.84532595]
[66.00274658 9.10341167]
[71.69799805 22.98016167]
[77.39324188 36.85691071]
[83.08848572 50.73366165]
[88.78372955 64.61041260]
[107.80366516 65.30527496]
[123.15992737 75.10987854]
[131.05107117 90.62473297]
[130.02447510 107.18656158]
[143.32713318 114.11759186]
[156.62980652 121.04861450]
[169.93246460 127.97964478]
[183.23512268 134.91067505]
[195.83020020 131.78485107]
[206.80265808 137.92713928]
[210.47868347 149.53103638]
[223.59692383 156.80506897]
[236.80850220 163.90820312]
[250.11116028 170.83923340]
[263.41381836 177.77026367]
[282.74563599 160.97802734]
[307.53738403 154.76298523]
[332.41143799 160.42871094]
[351.99249268 176.70652771]
[362.06915283 200.03927612]
[377.05780029 199.45524597]
[392.04641724 198.87121582]
[407.03503418 198.28718567]
[422.02368164 197.70315552]
[437.01229858 197.11911011]
[452.00091553 196.53507996]
[466.98953247 195.95104980]
[481.97817993 195.36701965]
[496.96679688 194.78298950]
[512.55853271 188.12452698]
[523.27294922 201.26365662]
[513.61334229 215.19665527]
[497.55084229 209.77160645]
[482.56219482 210.35565186]
[467.57357788 210.93968201]
[452.58496094 211.52371216]
[437.59631348 212.10774231]
[422.60769653 212.69177246]
[407.61907959 213.27580261]
[392.63046265 213.85984802]
[377.64181519 214.44387817]
[362.65319824 215.02790833]
[361.44784546 222.31704712]
[359.26837158 229.37930298]
[356.15399170 236.08505249]
[352.16107178 242.31112671]
[347.36209106 247.94306946]
[341.84448242 252.87718201]
[335.70877075 257.02255249]
[329.06695557 260.30258179]
[322.04043579 262.65649414]
[314.75765991 264.04049683]
[307.35189819 264.42843628]
[299.95883179 263.81250000]
[292.71395874 262.20321655]
[285.75018311 259.62936401]
[279.19531250 256.13732910]
[273.16983032 251.79046631]
[267.78454590 246.66781616]
[263.13864136 240.86265564]
[259.31781006 234.48089600]
] def
/pairs [
[5 74]
[6 73]
[7 72]
[9 71]
[10 70]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[21 46]
[22 45]
[23 44]
[24 43]
[27 40]
[28 39]
[29 38]
[30 37]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[79 101]
[80 100]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 0.2 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
  -0.00000
] def

/invert false def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
% Start Annotations
13 66 1 gmark
81 cmark

% End Annotations
% show it
showpage
end
%%EOF
